{"version":3,"sources":["webpack:///./src/pages/news.js","webpack:///./src/utils/truncate.js"],"names":["News","useState","response","setResponse","posts","setPosts","loadMore","setLoadMore","_limit","_start","_sort","params","setParams","getPosts","next","fetch","getPostsUrl","then","data","useEffect","length","pageContext","map","post","i","id","imagePath","POSTS_PATH","image","formats","small","url","title","text","description","htmlCaption","words","replace","split","splice","join","date","published_at","cta","src","createSlug","label","slice","styleType","style","textAlign","type","gutter","left","right","top","onClick"],"mappings":"2KA8FeA,UApFF,WAAO,IAAD,EACeC,mBAAS,IAAlCC,EADU,KACAC,EADA,OAESF,mBAAS,IAA5BG,EAFU,KAEHC,EAFG,OAGeJ,oBAAS,GAAlCK,EAHU,KAGAC,EAHA,OAIWN,mBAAS,CACnCO,OAAQ,EACRC,OAAQ,EACRC,MAAO,sBAHFC,EAJU,KAIFC,EAJE,KAUXC,EAAW,SAACC,GAChBC,YAAMC,YAAYL,EAAQG,IAAOG,MAAK,SAACC,GACrCf,EAAYe,OAkBhB,OAdAC,qBAAU,WACRN,MACC,IAEHM,qBAAU,WACJjB,GAAYA,EAASkB,OAAS,GAChCf,EAAS,GAAD,mBAAKD,GAAL,YAAeF,KACvBU,EAAU,OAAD,UAAMD,EAAN,CAAcF,OAAQE,EAAOF,OAASE,EAAOH,UACtDD,EAAYL,EAASkB,SAAWT,EAAOH,SAEvCD,GAAY,KAEb,CAACL,IAGF,kBAAC,IAAD,CAAQmB,YAAaH,GACnB,kBAAC,IAAD,KAEGd,EAAMkB,KAAI,SAACC,EAAMC,GAChB,GAAU,IAANA,EACF,OACE,kBAAC,IAAD,CACEC,GAAIF,EAAKE,GACTC,UAAS,GAAKC,IAAaJ,EAAKK,MAAMC,QAAQC,MAAMC,IACpDC,MAAOT,EAAKS,MACZC,MAASV,EAAKW,aCnDLC,EDmD4BZ,EAAKW,YCnDpBE,EDmDiC,GClD/CD,EAAYE,QAAQ,gBAAiB,IACtCC,MAAM,KAAKC,OAAO,EAAGH,GAAOI,KAAK,MDiDqB,IAAzD,MACJC,KAAMlB,EAAKmB,aACXC,IAAK,CACHC,IAAI,SAAUrB,EAAKE,GAAhB,IAAsBoB,YAAWtB,EAAKS,OACzCc,MAAO,sBCvDD,IAACX,EAAaC,KD8D9B,kBAAC,IAAD,KACGhC,EAAM2C,MAAM,GAAGzB,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAAC,IAAD,CACEC,GAAIF,EAAKE,GACTC,UAAS,GAAKC,IAAaJ,EAAKK,MAAMC,QAAQC,MAAMC,IACpDC,MAAOT,EAAKS,MACZS,KAAMlB,EAAKmB,aACXM,UAAU,OACVL,IAAK,CACHC,IAAI,SAAUrB,EAAKE,GAAhB,IAAsBoB,YAAWtB,EAAKS,cAMhD1B,GACC,yBAAK2C,MAAO,CAAEC,UAAW,WACvB,kBAAC,IAAD,CACEC,KAAK,SACLC,OAAQ,CAAEC,KAAM,OAAQC,MAAO,OAAQC,IAAK,UAC5CC,QAAS,WACP3C,MAJJ,6B","file":"component---src-pages-news-js-11139e6d017430b0d89f.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetch, getPostsUrl, createSlug, POSTS_PATH } from '../utils/dao';\nimport { truncate } from '../utils/truncate';\n\n// Components\nimport { Layout, Container, NewsCard, Card, CardGroup, Button } from '../components';\n\n// Data\nimport data from '../data/pages/news.json';\n\nconst News = () => {\n  const [response, setResponse] = useState({});\n  const [posts, setPosts] = useState([]);\n  const [loadMore, setLoadMore] = useState(true);\n  const [params, setParams] = useState({\n    _limit: 4,\n    _start: 0,\n    _sort: 'published_at:desc',\n  });\n\n  const getPosts = (next) => {\n    fetch(getPostsUrl(params, next)).then((data) => {\n      setResponse(data);\n    });\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  useEffect(() => {\n    if (response && response.length > 0) {\n      setPosts([...posts, ...response]);\n      setParams({ ...params, _start: params._start + params._limit });\n      setLoadMore(response.length === params._limit);\n    } else {\n      setLoadMore(false);\n    }\n  }, [response]);\n\n  return (\n    <Layout pageContext={data}>\n      <Container>\n        {/* Newest Post (Featured post) */}\n        {posts.map((post, i) => {\n          if (i === 0)\n            return (\n              <NewsCard\n                id={post.id}\n                imagePath={`${POSTS_PATH}${post.image.formats.small.url}`}\n                title={post.title}\n                text={`${post.description ? truncate(post.description, 45) : ''}...`}\n                date={post.published_at}\n                cta={{\n                  src: `/post/${post.id}/${createSlug(post.title)}`,\n                  label: 'Continue Reading',\n                }}\n              />\n            );\n        })}\n\n        {/* Cards - All posts other than first post */}\n        <CardGroup>\n          {posts.slice(1).map((post, i) => (\n            <Card\n              id={post.id}\n              imagePath={`${POSTS_PATH}${post.image.formats.small.url}`}\n              title={post.title}\n              date={post.published_at}\n              styleType=\"news\"\n              cta={{\n                src: `/post/${post.id}/${createSlug(post.title)}`\n              }}\n            />\n          ))}\n        </CardGroup>\n\n        {loadMore && (\n          <div style={{ textAlign: 'center' }}>\n            <Button\n              type=\"button\"\n              gutter={{ left: 'auto', right: 'auto', top: '1.5rem' }}\n              onClick={() => {\n                getPosts();\n              }}>\n              Load more news posts\n            </Button>\n          </div>\n        )}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default News;\n","export const truncate = (htmlCaption, words) => {\n  const stringCaption = htmlCaption.replace(/(<([^>]+)>)/gi, '');\n  return stringCaption.split(' ').splice(0, words).join(' ');\n};\n"],"sourceRoot":""}